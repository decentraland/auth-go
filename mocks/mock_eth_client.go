// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/decentraland/auth-go/ethereum (interfaces: EthClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEthClient is a mock of EthClient interface
type MockEthClient struct {
	ctrl     *gomock.Controller
	recorder *MockEthClientMockRecorder
}

// MockEthClientMockRecorder is the mock recorder for MockEthClient
type MockEthClientMockRecorder struct {
	mock *MockEthClient
}

// NewMockEthClient creates a new mock instance
func NewMockEthClient(ctrl *gomock.Controller) *MockEthClient {
	mock := &MockEthClient{ctrl: ctrl}
	mock.recorder = &MockEthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEthClient) EXPECT() *MockEthClientMockRecorder {
	return m.recorder
}

// GetDefaultAccount mocks base method
func (m *MockEthClient) GetDefaultAccount() (string, error) {
	ret := m.ctrl.Call(m, "GetDefaultAccount")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultAccount indicates an expected call of GetDefaultAccount
func (mr *MockEthClientMockRecorder) GetDefaultAccount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultAccount", reflect.TypeOf((*MockEthClient)(nil).GetDefaultAccount))
}

// ListAccounts mocks base method
func (m *MockEthClient) ListAccounts() ([]string, error) {
	ret := m.ctrl.Call(m, "ListAccounts")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts
func (mr *MockEthClientMockRecorder) ListAccounts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockEthClient)(nil).ListAccounts))
}

// NetVersion mocks base method
func (m *MockEthClient) NetVersion() (string, error) {
	ret := m.ctrl.Call(m, "NetVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetVersion indicates an expected call of NetVersion
func (mr *MockEthClientMockRecorder) NetVersion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetVersion", reflect.TypeOf((*MockEthClient)(nil).NetVersion))
}

// Sign mocks base method
func (m *MockEthClient) Sign(arg0, arg1, arg2 string) (string, error) {
	ret := m.ctrl.Call(m, "Sign", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockEthClientMockRecorder) Sign(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockEthClient)(nil).Sign), arg0, arg1, arg2)
}
